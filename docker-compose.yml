version: '3.8'

services:
  proxy:
    container_name: nginx_proxy
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: nginx-proxy
    ports:
      - '80:80'
    environment:
      BACKEND_HOST: api
      BACKEND_PORT: '8080'
      NEXTJS_HOST: frontend
      NEXTJS_PORT: '3000'
    networks:
      - app-network
    depends_on:
      - frontend

  frontend:
    container_name: frontend_app
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: frontend
    ports:
      - '3000:3000'
    networks:
      - app-network
    depends_on:
      - api

  api:
    container_name: backend_app
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - '8080:8080'
      - '8081:8081'
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DB_CONNECTION_STRING: 'Server=sqlserver;Database=SimulationDb;User Id=sa;Password=New_password123!;TrustServerCertificate=True;'
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - app-network

  sqlserver:
    container_name: sqlserver
    image: mcr.microsoft.com/azure-sql-edge:latest
    environment:
      SA_PASSWORD: New_password123!
      ACCEPT_EULA: 1
      MSSQL_DB: SimulationDb
    ports:
      - '1433:1433'
    volumes:
      - sqlserver_data:/var/opt/mssql
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'New_password123!' -C -Q 'SELECT 1' || exit 1",
        ]
      timeout: 20s
      retries: 10
      interval: 10s
    networks:
      - app-network

volumes:
  sqlserver_data:

networks:
  app-network:
    driver: bridge
